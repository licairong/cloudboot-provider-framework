// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaidPluginClient is the client API for RaidPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaidPluginClient interface {
	RAID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*Response, error)
}

type raidPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewRaidPluginClient(cc grpc.ClientConnInterface) RaidPluginClient {
	return &raidPluginClient{cc}
}

func (c *raidPluginClient) RAID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.RaidPlugin/RAID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raidPluginClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.RaidPlugin/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaidPluginServer is the server API for RaidPlugin service.
// All implementations must embed UnimplementedRaidPluginServer
// for forward compatibility
type RaidPluginServer interface {
	RAID(context.Context, *Request) (*Response, error)
	Clear(context.Context, *ClearRequest) (*Response, error)
	mustEmbedUnimplementedRaidPluginServer()
}

// UnimplementedRaidPluginServer must be embedded to have forward compatible implementations.
type UnimplementedRaidPluginServer struct {
}

func (UnimplementedRaidPluginServer) RAID(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RAID not implemented")
}
func (UnimplementedRaidPluginServer) Clear(context.Context, *ClearRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedRaidPluginServer) mustEmbedUnimplementedRaidPluginServer() {}

// UnsafeRaidPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaidPluginServer will
// result in compilation errors.
type UnsafeRaidPluginServer interface {
	mustEmbedUnimplementedRaidPluginServer()
}

func RegisterRaidPluginServer(s grpc.ServiceRegistrar, srv RaidPluginServer) {
	s.RegisterService(&RaidPlugin_ServiceDesc, srv)
}

func _RaidPlugin_RAID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaidPluginServer).RAID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RaidPlugin/RAID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaidPluginServer).RAID(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaidPlugin_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaidPluginServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RaidPlugin/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaidPluginServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaidPlugin_ServiceDesc is the grpc.ServiceDesc for RaidPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaidPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RaidPlugin",
	HandlerType: (*RaidPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RAID",
			Handler:    _RaidPlugin_RAID_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _RaidPlugin_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// OobPluginClient is the client API for OobPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OobPluginClient interface {
	OOB(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	PowerReset(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type oobPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewOobPluginClient(cc grpc.ClientConnInterface) OobPluginClient {
	return &oobPluginClient{cc}
}

func (c *oobPluginClient) OOB(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.OobPlugin/OOB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oobPluginClient) PowerReset(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.OobPlugin/PowerReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OobPluginServer is the server API for OobPlugin service.
// All implementations must embed UnimplementedOobPluginServer
// for forward compatibility
type OobPluginServer interface {
	OOB(context.Context, *Request) (*Response, error)
	PowerReset(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedOobPluginServer()
}

// UnimplementedOobPluginServer must be embedded to have forward compatible implementations.
type UnimplementedOobPluginServer struct {
}

func (UnimplementedOobPluginServer) OOB(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OOB not implemented")
}
func (UnimplementedOobPluginServer) PowerReset(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerReset not implemented")
}
func (UnimplementedOobPluginServer) mustEmbedUnimplementedOobPluginServer() {}

// UnsafeOobPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OobPluginServer will
// result in compilation errors.
type UnsafeOobPluginServer interface {
	mustEmbedUnimplementedOobPluginServer()
}

func RegisterOobPluginServer(s grpc.ServiceRegistrar, srv OobPluginServer) {
	s.RegisterService(&OobPlugin_ServiceDesc, srv)
}

func _OobPlugin_OOB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OobPluginServer).OOB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OobPlugin/OOB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OobPluginServer).OOB(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OobPlugin_PowerReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OobPluginServer).PowerReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OobPlugin/PowerReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OobPluginServer).PowerReset(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OobPlugin_ServiceDesc is the grpc.ServiceDesc for OobPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OobPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OobPlugin",
	HandlerType: (*OobPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OOB",
			Handler:    _OobPlugin_OOB_Handler,
		},
		{
			MethodName: "PowerReset",
			Handler:    _OobPlugin_PowerReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
